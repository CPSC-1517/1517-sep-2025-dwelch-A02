@page "/dataentry"
<PageTitle>Data Entry</PageTitle>
@rendermode InteractiveServer

<!-- reference the namespaces for the Employment class-->
@using OOPsReview;


<h1>Data Entry</h1>
<p>practice data entry in a web page</p>

@*
    we wish to add a blockquote but center the control on the page
    to do so, we will use bootstrap formating with rows/columns
*@
<div class="row">
    <div class="offset-1 col-md-10">
        <blockquote style="background-color:gainsboro;">
            <p>
                This component will demonstrate how your page can handle validation of data input,
                showing validation messages when you have a number of controls for data entry. This
                component will validate the locate controls and create any validation messages for
                invalid data. The messages can be collected using various techniques such as: List or
                Dictionary.
            </p>
            <p>
                This page will input data for an instance of the Employment class. This demo will
                use the Employment class from the OOPs review. The SupervisoryLevel enum
                class will also be brought into this project. One could have included the entire
                class library as part of this solution instead of bringing in individual classes.
            </p>
        </blockquote>
    </div>
</div>

<!--
    typically somewhere on your page you have a feedback area for messages to your user

    You can divided this area in two:
        successfull feedback
        invalid (error/exception) feedback
    -->
<!--
    Success area
    check if there is a successful message to display

    one could also have checked the string using Lenght > 0

-->
@if(!string.IsNullOrWhiteSpace(feedBackMsg))
{
    <div class="row alert alert-success text-center">
        <p>@feedBackMsg</p>
    </div>
}

<!--
Error Message area
check if there are any error messages, if so display them
-->
@if(errorMsgs.Count >0)
{
    <div class="row alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach(var error in errorMsgs)
            {
                <!--
                due to the structure of a Dictionary entry
                there are two components: key and value
                Here we wish to just use the value

                If this was a List collection there is only
                one component, the string
                therefore you would NOT need the .Value
                -->
                <li>@error.Value</li>
            }
        </ul>
    </div>
}


<!--
form area
standard html controls also demostration InputRadioGroup/InputRadio
use bootstrap for formatting
each control will be on a separate row
each row is stack top to bottom
-->

<fieldset>
    <legend>Employment Data</legend>
    <!--
    the structure of a row will contain 2 columns
    1) will contain the label for the data entry
    2) will contain the input control for the data entry
    -->
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="title">Position Title</label>
        </div>
        <div class="col-md-2">
            <input type="text" id="title" placeholder="enter position"
                @bind="empTitle" />
        </div>
    </div>
    <br/>
    <div class="row">
        <div class=" offset-4 col-md-2">
            <label for="years">Years in Position</label>
        </div>
        <div class="col-md-2">
            <!--
                step is required so that the number can be entered with a decimal place
                by default number type input controls are whole numbers
                by default the step is 1
            -->
            <input type="number" id="years" placeholder="eg 3.4" style="width:75px;"
                    step="0.1"  @bind="empYears" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class=" offset-4 col-md-2">
            <label for="startdate">Start Date</label>
        </div>
        <div class="col-md-2">
            <input type="date" id="startdate" 
                   @bind="empStartDate" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4  col-md-2">
            <label for="levels">Supervisory Level</label>
        </div>
        <div class="col-md-2">
            <!-- we wish to select from a set of defined choices
            this will limit the user to ONLY acceptable values
            -->
            <select id="levels" @bind="empLevelS">
                <!-- the user must choose a supervisory level, therefore
                there is no need for a prompt line on this select
                -->
                <!--
                there is a line for each item in the Enum
                you could hard-code each option tag

                <option value="Entry">Entry</option>
                <option value="TeamMember">TeamMember</option>
                <option value="TeamLeader">TeamLeader</option>
                <option value="Supervisory">Supervisory</option>
                <option value="DepartmentHead">DepartmentHead</option>
                <option value="Owner">Owner</option>
                -->
                <!--
                you can also access the Enum definition and
                extract each enum value (treating the Enum as a collection)
                -->
                @foreach(var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    //each Enum value will considered as a string
                    //the value attribute is the value returned when a choice has been made
                    //the string between the opening and closing tag will be displayed to the user
                    <option value="@item">@item</option>
                }
            </select>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4  col-md-2">
            <label for="levelr">Supervisory Level</label>
        </div>
        <div class="col-md-2">
            <!-- we wish to select from a set of defined choices
            this will limit the user to ONLY acceptable values

            this control is not a standard html input control
            this control is a Blazor control
            this control needs to use bind-value instead of just bind
            -->
            <InputRadioGroup Name="supervisoryradio" @bind-Value="empLevelR">
                @foreach (var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    //using the self closing version
                    <InputRadio Name="supervisoryradio" Value="@item" />@($" {item}")<br />
                }
            </InputRadioGroup>
        </div>
    </div>
    <br/>
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-outline-primary rounded-pill"
                    @onclick="OnCollect">
                Submit
            </button>
            &nbsp;&nbsp
            <button type="submit" class="btn btn-outline-secondary rounded-pill"
                    @onclick="OnClear">
                Clear
            </button>

        </div>
    </div>
</fieldset>

@code {

    //general page variables

    private string feedBackMsg = "";

    //could be using a List<string> as well as this Dictionary
    //private List<string> errormsgs = new ();

    //the Dictionary has a structure of 2 values: TKey (acts like a primary key)
    //                                            TValue which is the string associated with the key
    //one could search the dictionary on the TKey value and retrieve the TValue string
    //NOTE: the TKey value MUST be unique within the entries of the Dictionary
    //datat types for Tkey and TValue can be any value C# data type
    private Dictionary<int, string> errorMsgs = new();

    //employment data form variables

    private string empTitle;
    private double empYears = 0.0;
    private DateTime empStartDate;

    //for the SupervisoryLevel, the form will implement the control
    // in two fashions: as a list (select) and as a set of RadioButtons
    //only one of the variable will be used for actual data collection

    private SupervisoryLevel empLevelS; //this will be used on the html select control
    private SupervisoryLevel empLevelR; //this will be used on the Blazor control InputRadioGroup

    //Injection
    //this variable is required if you are using property injection
    //  for services available from the system which are not normally included
    //  for use to your application
    //this service collection will allow us to find the top of your application

    [Inject]
    private IWebHostEnvironment webHostEnvironment { get; set; }

    protected void OnCollect()
    {
        /* clear out all old messages*/
        feedBackMsg ="";
        errorMsgs.Clear();


        //is the data valid??

        //primitive validation
        //  presence
        //  datatype/pattern (Regex)
        //  range of values

        //Business Rules (aka your validation requirements)
        //title must be presence, must have at least one character
        //start date cannot be in the future
        //years cannot be less than zero

        //empTitle needs to have at least one character
        if(string.IsNullOrWhiteSpace(empTitle))
        {
            //add a instance to the Dictionary (array)
            //two values are needed: TKey and TValue
            errorMsgs.Add(1, "Position title cannot be empty.");
        }

        //startdate cannot be in the future

        //concern:
        // if the empStartDate is filled by some process that include time
        //      one needs to be careful about using .Today
        // DateTime.Today uses 00:00:00 am as the time
        // DateTime.Now uses hh:mm:ss am/pm as the time
        //Problem is 2025/10/25 08:30:00 am greater than 2025/10/25 00:00:00 am? Answer: YES!!!!!
        //Solution to ignore the time of the day
        //  one solution is to add 1 to Today and thus the day will be the start of the next day
        if (empStartDate >= DateTime.Today.AddDays(1))
        {
            //remember the TKey value must be unique in the Dictionary
            errorMsgs.Add(2, "Start date cannot be in the future.");
        }

        //years cannot be negative

        //if (empYears < 0.0)
        if (!Utilities.IsZeroOrPositive(empYears))
        {
            errorMsgs.Add(3, "Years cannot be negative.");
        }

        //determine if the data is good for further processing
        if(errorMsgs.Count == 0)
        {
            //assume data is good

            //if you are using a class to collect and hold your data
            //      you need to be concerned with how the class coding handles
            //      any errors in creating or processing code within the class
            //this normally means some type of try/catch processing (user friendly error handling)
            try
            {
                //process the good data
                //save the data to a csv text file

                //create an instance of Employment to use to write to the data file
                //the data file record will use the ToString() of Employment
                //(Note: you could manually in this method create the concatenated string for
                //      writing)
                //Remember if an error occurs while creating your instance, the instance will
                //  throw an exception; which should be caught by the catches below.
                Employment employment = new Employment(empTitle, empLevelS, empStartDate, empYears);

                //prep to get to the data file that is used to save the data

                //write the class data as a string to a csv text file
                // required:
                // a) know the location of the file (name)
                // b) the technique to use in writing to the file
                //    there are several ways to write to the file
                //      a) StreamWriter/StreamReader
                //      b) using the System.IO.File methods
                //           (handles the streaming of the data)

                //there are a couple of ways to refer to your file and its path
                //  i) obtain the root path of your application using an injection
                //      service called IWebHostEnvironment via property injection (see variables)
                //  ii) use relative addressing starting a the top of your application (see report page)

                string appPathName = webHostEnvironment.ContentRootPath; //top of this web application

                //WARNING: the folder slash for your path can be both a forward or back slash
                //              on a PC BUT for an Apple machine, you must use the forward slash (/)
                string csvFilePathName = $@"{appPathName}/Components/Data/GoodEmployment.csv";

                //pred the output line
                string line = $"{employment.ToString()}\n";

                //write the line to the file

                //WARNING: when you use the System.IO.File you MUST use the
                //          fully qualified naming to the class method you wish
                //          to use.
                //          Fully qualified naming includes namespace.methodOrProperty
                //         you can not get by just using a reference to the
                //           namespace at the top of your code (using System.IO;)


                //the System.IO.File method will be AppendAllText(filepathname,string)
                // AppendAllText will
                //   a) create the file if it does not exist
                //   b) opens
                //   c) writes the text
                //   d) closes
                System.IO.File.AppendAllText(csvFilePathName, line);

                //talk to your user
                feedBackMsg = "Data has been saved";
            }
          
            catch (ArgumentNullException ex)
            {
                //is the default general bucket for all error messages
                errorMsgs.Add(5, $"Data Missing Error: {ex.Message}");
            }
            catch (ArgumentException ex)
            {
                //is the default general bucket for all error messages
                errorMsgs.Add(6, $"Bad Data Error: {ex.Message}");
            }
            catch(Exception ex)
            {
                //is the default general bucket for all error messages
                errorMsgs.Add(4, $"System Error: {ex.Message}");
            }
           
        }
    }

    protected void OnClear()
    {
        /* clear out all old messages*/
        feedBackMsg ="";
        errorMsgs.Clear();

        //clear the data form field
        //reset to the empty state
        empTitle = "";
        empYears =0.0;
        empStartDate = DateTime.Today;
        empLevelS = SupervisoryLevel.Entry;
        empLevelR = SupervisoryLevel.Entry;
    }

    protected override void OnInitialized()
    {
        //leave the base call in so that the default initialization is done
        base.OnInitialized();

        //customize intialization;
        empStartDate = DateTime.Today;

    }
}
